// Code generated by "genenum.exe -typename=Condition -packagename=condition -basedir=enum -flagtype=uint16 -vectortype=int"

package condition_flag

import "github.com/kasworld/goguelike-single/enum/condition"

type ConditionFlag uint16

const (
	BlindFlag     = ConditionFlag(1 << condition.Blind)     // sight 0, your attack miss 50%
	InvisibleFlag = ConditionFlag(1 << condition.Invisible) // other ao cannot see you, attack to you miss 50%
	BurdenFlag    = ConditionFlag(1 << condition.Burden)    // weight limit reduced
	FloatFlag     = ConditionFlag(1 << condition.Float)     // no pickup, no interact to fieldobj, overload half, no slip on slippery tile
	GreasyFlag    = ConditionFlag(1 << condition.Greasy)    // drop equiped carryobj randomly, increase drop carryobject on dead
	DrunkenFlag   = ConditionFlag(1 << condition.Drunken)   // move/attack dir changed randomly
	SleepFlag     = ConditionFlag(1 << condition.Sleep)     // cannot act except killself
	ContagionFlag = ConditionFlag(1 << condition.Contagion) // make contagion other near(5x5)
	SlowFlag      = ConditionFlag(1 << condition.Slow)      // need actionpoint doubled
	HasteFlag     = ConditionFlag(1 << condition.Haste)     // need actionpoint halfed
)

func (bt *ConditionFlag) SetByCondition(n condition.Condition) {
	*bt |= ConditionFlag(1 << n)
}

func (bt *ConditionFlag) ClearByCondition(n condition.Condition) {
	*bt = *bt &^ ConditionFlag(1<<n)
}

func (bt ConditionFlag) TestByCondition(n condition.Condition) bool {
	return bt&ConditionFlag(1<<n) != 0
}

func (bt *ConditionFlag) SetByConditionFlag(v ConditionFlag) {
	*bt |= v
}

func (bt *ConditionFlag) ClearByConditionFlag(v ConditionFlag) {
	*bt = *bt &^ v
}

func (bt ConditionFlag) TestByConditionFlag(v ConditionFlag) bool {
	return bt&v != 0
}
