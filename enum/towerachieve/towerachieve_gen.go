// Code generated by "genenum.exe -typename=TowerAchieve -packagename=towerachieve -basedir=enum -vectortype=float64"

package towerachieve

import "fmt"

type TowerAchieve uint8

const (
	MoneyIn   TowerAchieve = iota //
	MoneyOut                      //
	EquipIn                       //
	EquipOut                      //
	PotionIn                      //
	PotionOut                     //
	ScrollIn                      //
	ScrollOut                     //

	TowerAchieve_Count int = iota
)

var _TowerAchieve2string = [TowerAchieve_Count][2]string{
	MoneyIn:   {"MoneyIn", ""},
	MoneyOut:  {"MoneyOut", ""},
	EquipIn:   {"EquipIn", ""},
	EquipOut:  {"EquipOut", ""},
	PotionIn:  {"PotionIn", ""},
	PotionOut: {"PotionOut", ""},
	ScrollIn:  {"ScrollIn", ""},
	ScrollOut: {"ScrollOut", ""},
}

func (e TowerAchieve) String() string {
	if e >= 0 && e < TowerAchieve(TowerAchieve_Count) {
		return _TowerAchieve2string[e][0]
	}
	return fmt.Sprintf("TowerAchieve%d", uint8(e))
}

func (e TowerAchieve) CommentString() string {
	if e >= 0 && e < TowerAchieve(TowerAchieve_Count) {
		return _TowerAchieve2string[e][1]
	}
	return ""
}

var _string2TowerAchieve = map[string]TowerAchieve{
	"MoneyIn":   MoneyIn,
	"MoneyOut":  MoneyOut,
	"EquipIn":   EquipIn,
	"EquipOut":  EquipOut,
	"PotionIn":  PotionIn,
	"PotionOut": PotionOut,
	"ScrollIn":  ScrollIn,
	"ScrollOut": ScrollOut,
}

func String2TowerAchieve(s string) (TowerAchieve, bool) {
	v, b := _string2TowerAchieve[s]
	return v, b
}
