// Code generated by "genenum.exe -typename=TurnAction -packagename=turnaction -basedir=enum -vectortype=int"

package turnaction

import "fmt"

type TurnAction uint8

const (
	PassTurn    TurnAction = iota // no action just trigger turn
	Rebirth                       //
	MoveFloor                     // tower cmd
	Meditate                      // rest and recover HP,SP
	KillSelf                      //
	Move                          // move 8way near tile
	Attack                        // attack near 1 tile
	AttackWide                    // attack near 3 tile
	AttackLong                    // attack 3 tile to direction
	Pickup                        // pickup carryobj
	Drop                          // drop carryobj
	Equip                         // equip equipable carryobj
	UnEquip                       // unequip equipable carryobj
	DrinkPotion                   //
	ReadScroll                    //
	Recycle                       // sell carryobj
	EnterPortal                   //
	ActTeleport                   //
	//

	TurnAction_Count int = iota
)

var _TurnAction2string = [TurnAction_Count][2]string{
	PassTurn:    {"PassTurn", "no action just trigger turn"},
	Rebirth:     {"Rebirth", ""},
	MoveFloor:   {"MoveFloor", "tower cmd"},
	Meditate:    {"Meditate", "rest and recover HP,SP"},
	KillSelf:    {"KillSelf", ""},
	Move:        {"Move", "move 8way near tile"},
	Attack:      {"Attack", "attack near 1 tile"},
	AttackWide:  {"AttackWide", "attack near 3 tile"},
	AttackLong:  {"AttackLong", "attack 3 tile to direction"},
	Pickup:      {"Pickup", "pickup carryobj"},
	Drop:        {"Drop", "drop carryobj"},
	Equip:       {"Equip", "equip equipable carryobj"},
	UnEquip:     {"UnEquip", "unequip equipable carryobj"},
	DrinkPotion: {"DrinkPotion", ""},
	ReadScroll:  {"ReadScroll", ""},
	Recycle:     {"Recycle", "sell carryobj"},
	EnterPortal: {"EnterPortal", ""},
	ActTeleport: {"ActTeleport", ""},
}

func (e TurnAction) String() string {
	if e >= 0 && e < TurnAction(TurnAction_Count) {
		return _TurnAction2string[e][0]
	}
	return fmt.Sprintf("TurnAction%d", uint8(e))
}

func (e TurnAction) CommentString() string {
	if e >= 0 && e < TurnAction(TurnAction_Count) {
		return _TurnAction2string[e][1]
	}
	return ""
}

var _string2TurnAction = map[string]TurnAction{
	"PassTurn":    PassTurn,
	"Rebirth":     Rebirth,
	"MoveFloor":   MoveFloor,
	"Meditate":    Meditate,
	"KillSelf":    KillSelf,
	"Move":        Move,
	"Attack":      Attack,
	"AttackWide":  AttackWide,
	"AttackLong":  AttackLong,
	"Pickup":      Pickup,
	"Drop":        Drop,
	"Equip":       Equip,
	"UnEquip":     UnEquip,
	"DrinkPotion": DrinkPotion,
	"ReadScroll":  ReadScroll,
	"Recycle":     Recycle,
	"EnterPortal": EnterPortal,
	"ActTeleport": ActTeleport,
}

func String2TurnAction(s string) (TurnAction, bool) {
	v, b := _string2TurnAction[s]
	return v, b
}
