// Code generated by "genenum.exe -typename=DangerType -packagename=dangertype -basedir=enum -vectortype=int"

package dangertype

import "fmt"

type DangerType uint8

const (
	None             DangerType = iota // empty error
	BasicAttack                        // from ao
	WideAttack                         // from ao
	LongAttack                         // from ao
	RotateLineAttack                   // from field obj
	MineExplode                        // from field obj

	DangerType_Count int = iota
)

var _DangerType2string = [DangerType_Count][2]string{
	None:             {"None", "empty error"},
	BasicAttack:      {"BasicAttack", "from ao"},
	WideAttack:       {"WideAttack", "from ao"},
	LongAttack:       {"LongAttack", "from ao"},
	RotateLineAttack: {"RotateLineAttack", "from field obj"},
	MineExplode:      {"MineExplode", "from field obj"},
}

func (e DangerType) String() string {
	if e >= 0 && e < DangerType(DangerType_Count) {
		return _DangerType2string[e][0]
	}
	return fmt.Sprintf("DangerType%d", uint8(e))
}

func (e DangerType) CommentString() string {
	if e >= 0 && e < DangerType(DangerType_Count) {
		return _DangerType2string[e][1]
	}
	return ""
}

var _string2DangerType = map[string]DangerType{
	"None":             None,
	"BasicAttack":      BasicAttack,
	"WideAttack":       WideAttack,
	"LongAttack":       LongAttack,
	"RotateLineAttack": RotateLineAttack,
	"MineExplode":      MineExplode,
}

func String2DangerType(s string) (DangerType, bool) {
	v, b := _string2DangerType[s]
	return v, b
}
