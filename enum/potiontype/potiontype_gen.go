// Code generated by "genenum.exe -typename=PotionType -packagename=potiontype -basedir=enum -vectortype=int"

package potiontype

import "fmt"

type PotionType uint8

const (
	Empty           PotionType = iota // empty potion
	RecoverHP10                       // heal 10 hp
	RecoverHPRate10                   // heal 10% hp
	RecoverSP10                       // heal 10 sp
	RecoverSPRate10                   // heal 10% sp
	RecoverHP50                       // heal 50 hp
	RecoverHPRate50                   // heal 50% hp
	RecoverSP50                       // heal 50 sp
	RecoverSPRate50                   // heal 50% sp
	RecoverHP100                      // heal 100 hp
	RecoverHPFull                     // heal 100% hp
	RecoverSP100                      // heal 100 sp
	RecoverSPFull                     // heal 100% sp
	BuffRecoverHP1                    // heal span 1 hp for 300 turn
	BuffRecoverSP1                    // heal span 1 sp for 300 turn
	BuffSight1                        // enhance sight 1 for 300 turn
	BuffSight5                        // enhance sight 5 for 300 turn
	BuffSightMax                      // enhance sight max for 300 turn

	PotionType_Count int = iota
)

var _PotionType2string = [PotionType_Count][2]string{
	Empty:           {"Empty", "empty potion"},
	RecoverHP10:     {"RecoverHP10", "heal 10 hp"},
	RecoverHPRate10: {"RecoverHPRate10", "heal 10% hp"},
	RecoverSP10:     {"RecoverSP10", "heal 10 sp"},
	RecoverSPRate10: {"RecoverSPRate10", "heal 10% sp"},
	RecoverHP50:     {"RecoverHP50", "heal 50 hp"},
	RecoverHPRate50: {"RecoverHPRate50", "heal 50% hp"},
	RecoverSP50:     {"RecoverSP50", "heal 50 sp"},
	RecoverSPRate50: {"RecoverSPRate50", "heal 50% sp"},
	RecoverHP100:    {"RecoverHP100", "heal 100 hp"},
	RecoverHPFull:   {"RecoverHPFull", "heal 100% hp"},
	RecoverSP100:    {"RecoverSP100", "heal 100 sp"},
	RecoverSPFull:   {"RecoverSPFull", "heal 100% sp"},
	BuffRecoverHP1:  {"BuffRecoverHP1", "heal span 1 hp for 300 turn"},
	BuffRecoverSP1:  {"BuffRecoverSP1", "heal span 1 sp for 300 turn"},
	BuffSight1:      {"BuffSight1", "enhance sight 1 for 300 turn"},
	BuffSight5:      {"BuffSight5", "enhance sight 5 for 300 turn"},
	BuffSightMax:    {"BuffSightMax", "enhance sight max for 300 turn"},
}

func (e PotionType) String() string {
	if e >= 0 && e < PotionType(PotionType_Count) {
		return _PotionType2string[e][0]
	}
	return fmt.Sprintf("PotionType%d", uint8(e))
}

func (e PotionType) CommentString() string {
	if e >= 0 && e < PotionType(PotionType_Count) {
		return _PotionType2string[e][1]
	}
	return ""
}

var _string2PotionType = map[string]PotionType{
	"Empty":           Empty,
	"RecoverHP10":     RecoverHP10,
	"RecoverHPRate10": RecoverHPRate10,
	"RecoverSP10":     RecoverSP10,
	"RecoverSPRate10": RecoverSPRate10,
	"RecoverHP50":     RecoverHP50,
	"RecoverHPRate50": RecoverHPRate50,
	"RecoverSP50":     RecoverSP50,
	"RecoverSPRate50": RecoverSPRate50,
	"RecoverHP100":    RecoverHP100,
	"RecoverHPFull":   RecoverHPFull,
	"RecoverSP100":    RecoverSP100,
	"RecoverSPFull":   RecoverSPFull,
	"BuffRecoverHP1":  BuffRecoverHP1,
	"BuffRecoverSP1":  BuffRecoverSP1,
	"BuffSight1":      BuffSight1,
	"BuffSight5":      BuffSight5,
	"BuffSightMax":    BuffSightMax,
}

func String2PotionType(s string) (PotionType, bool) {
	v, b := _string2PotionType[s]
	return v, b
}
