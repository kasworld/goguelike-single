// Code generated by "genenum.exe -typename=Tile -packagename=tile -basedir=enum -flagtype=uint16 -vectortype=int"

package tile

import "fmt"

type Tile uint8

const (
	Swamp  Tile = iota // layer 1
	Soil               //
	Stone              //
	Sand               //
	Sea                //
	Magma              //
	Ice                //
	Grass              //
	Tree               // layer 2
	Road               // layer 4
	Room               //
	Wall               //
	Window             //
	Door               //
	Fog                // layer 3
	Smoke              //
	//

	Tile_Count int = iota
)

var _Tile2string = [Tile_Count][2]string{
	Swamp:  {"Swamp", "layer 1"},
	Soil:   {"Soil", ""},
	Stone:  {"Stone", ""},
	Sand:   {"Sand", ""},
	Sea:    {"Sea", ""},
	Magma:  {"Magma", ""},
	Ice:    {"Ice", ""},
	Grass:  {"Grass", ""},
	Tree:   {"Tree", "layer 2"},
	Road:   {"Road", "layer 4"},
	Room:   {"Room", ""},
	Wall:   {"Wall", ""},
	Window: {"Window", ""},
	Door:   {"Door", ""},
	Fog:    {"Fog", "layer 3"},
	Smoke:  {"Smoke", ""},
}

func (e Tile) String() string {
	if e >= 0 && e < Tile(Tile_Count) {
		return _Tile2string[e][0]
	}
	return fmt.Sprintf("Tile%d", uint8(e))
}

func (e Tile) CommentString() string {
	if e >= 0 && e < Tile(Tile_Count) {
		return _Tile2string[e][1]
	}
	return ""
}

var _string2Tile = map[string]Tile{
	"Swamp":  Swamp,
	"Soil":   Soil,
	"Stone":  Stone,
	"Sand":   Sand,
	"Sea":    Sea,
	"Magma":  Magma,
	"Ice":    Ice,
	"Grass":  Grass,
	"Tree":   Tree,
	"Road":   Road,
	"Room":   Room,
	"Wall":   Wall,
	"Window": Window,
	"Door":   Door,
	"Fog":    Fog,
	"Smoke":  Smoke,
}

func String2Tile(s string) (Tile, bool) {
	v, b := _string2Tile[s]
	return v, b
}
