// Code generated by "genenum.exe -typename=Tile -packagename=tile -basedir=enum -flagtype=uint16 -vectortype=int"

package tile_flag

import (
	"bytes"
	"fmt"

	"github.com/kasworld/goguelike-single/enum/tile"
)

type TileFlag uint16

const (
	SwampFlag  = TileFlag(1 << tile.Swamp)  // layer 1
	SoilFlag   = TileFlag(1 << tile.Soil)   //
	StoneFlag  = TileFlag(1 << tile.Stone)  //
	SandFlag   = TileFlag(1 << tile.Sand)   //
	SeaFlag    = TileFlag(1 << tile.Sea)    //
	MagmaFlag  = TileFlag(1 << tile.Magma)  //
	IceFlag    = TileFlag(1 << tile.Ice)    //
	GrassFlag  = TileFlag(1 << tile.Grass)  //
	TreeFlag   = TileFlag(1 << tile.Tree)   // layer 2
	RoadFlag   = TileFlag(1 << tile.Road)   // layer 4
	RoomFlag   = TileFlag(1 << tile.Room)   //
	WallFlag   = TileFlag(1 << tile.Wall)   //
	WindowFlag = TileFlag(1 << tile.Window) //
	DoorFlag   = TileFlag(1 << tile.Door)   //
	FogFlag    = TileFlag(1 << tile.Fog)    // layer 3
	SmokeFlag  = TileFlag(1 << tile.Smoke)  //
)

func (cf TileFlag) String() string {
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "TileFlag[")
	for i := 0; i < tile.Tile_Count; i++ {
		if cf.TestByTile(tile.Tile(i)) {
			fmt.Fprintf(&buf, "%v ", tile.Tile(i))
		}
	}
	fmt.Fprintf(&buf, "]")
	return buf.String()
}

func (bt *TileFlag) SetByTile(n tile.Tile) {
	*bt |= TileFlag(1 << n)
}

func (bt *TileFlag) ClearByTile(n tile.Tile) {
	*bt = *bt &^ TileFlag(1<<n)
}

func (bt TileFlag) TestByTile(n tile.Tile) bool {
	return bt&TileFlag(1<<n) != 0
}

func (bt *TileFlag) SetByTileFlag(v TileFlag) {
	*bt |= v
}

func (bt *TileFlag) ClearByTileFlag(v TileFlag) {
	*bt = *bt &^ v
}

func (bt TileFlag) TestByTileFlag(v TileFlag) bool {
	return bt&v != 0
}
