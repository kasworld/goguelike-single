// Code generated by "genenum.exe -typename=Condition -packagename=condition -basedir=enum -flagtype=uint16 -vectortype=int"

package condition

import "fmt"

type Condition uint8

const (
	Blind     Condition = iota // sight 0, your attack miss 50%
	Invisible                  // other ao cannot see you, attack to you miss 50%
	Burden                     // weight limit reduced
	Float                      // no pickup, no interact to fieldobj, overload half, no slip on slippery tile
	Greasy                     // drop equiped carryobj randomly, increase drop carryobject on dead
	Drunken                    // move/attack dir changed randomly
	Sleep                      // cannot act except killself
	Contagion                  // make contagion other near(5x5)
	Slow                       // need actionpoint doubled
	Haste                      // need actionpoint halfed

	Condition_Count int = iota
)

var _Condition2string = [Condition_Count][2]string{
	Blind:     {"Blind", "sight 0, your attack miss 50%"},
	Invisible: {"Invisible", "other ao cannot see you, attack to you miss 50%"},
	Burden:    {"Burden", "weight limit reduced"},
	Float:     {"Float", "no pickup, no interact to fieldobj, overload half, no slip on slippery tile"},
	Greasy:    {"Greasy", "drop equiped carryobj randomly, increase drop carryobject on dead"},
	Drunken:   {"Drunken", "move/attack dir changed randomly"},
	Sleep:     {"Sleep", "cannot act except killself"},
	Contagion: {"Contagion", "make contagion other near(5x5)"},
	Slow:      {"Slow", "need actionpoint doubled"},
	Haste:     {"Haste", "need actionpoint halfed"},
}

func (e Condition) String() string {
	if e >= 0 && e < Condition(Condition_Count) {
		return _Condition2string[e][0]
	}
	return fmt.Sprintf("Condition%d", uint8(e))
}

func (e Condition) CommentString() string {
	if e >= 0 && e < Condition(Condition_Count) {
		return _Condition2string[e][1]
	}
	return ""
}

var _string2Condition = map[string]Condition{
	"Blind":     Blind,
	"Invisible": Invisible,
	"Burden":    Burden,
	"Float":     Float,
	"Greasy":    Greasy,
	"Drunken":   Drunken,
	"Sleep":     Sleep,
	"Contagion": Contagion,
	"Slow":      Slow,
	"Haste":     Haste,
}

func String2Condition(s string) (Condition, bool) {
	v, b := _string2Condition[s]
	return v, b
}
