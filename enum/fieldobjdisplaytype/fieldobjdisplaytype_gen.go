// Code generated by "genenum.exe -typename=FieldObjDisplayType -packagename=fieldobjdisplaytype -basedir=enum"

package fieldobjdisplaytype

import "fmt"

type FieldObjDisplayType uint8

const (
	None             FieldObjDisplayType = iota //
	StairUp                                     // inout
	StairDn                                     // inout
	PortalIn                                    // in only
	PortalAutoIn                                // auto in
	PortalOut                                   // out only
	Recycler                                    // sell item
	RotateLineAttack                            // rotate line of dangerobj
	//

	FieldObjDisplayType_Count int = iota
)

var _FieldObjDisplayType2string = [FieldObjDisplayType_Count][2]string{
	None:             {"None", ""},
	StairUp:          {"StairUp", "inout"},
	StairDn:          {"StairDn", "inout"},
	PortalIn:         {"PortalIn", "in only"},
	PortalAutoIn:     {"PortalAutoIn", "auto in"},
	PortalOut:        {"PortalOut", "out only"},
	Recycler:         {"Recycler", "sell item"},
	RotateLineAttack: {"RotateLineAttack", "rotate line of dangerobj"},
}

func (e FieldObjDisplayType) String() string {
	if e >= 0 && e < FieldObjDisplayType(FieldObjDisplayType_Count) {
		return _FieldObjDisplayType2string[e][0]
	}
	return fmt.Sprintf("FieldObjDisplayType%d", uint8(e))
}

func (e FieldObjDisplayType) CommentString() string {
	if e >= 0 && e < FieldObjDisplayType(FieldObjDisplayType_Count) {
		return _FieldObjDisplayType2string[e][1]
	}
	return ""
}

var _string2FieldObjDisplayType = map[string]FieldObjDisplayType{
	"None":             None,
	"StairUp":          StairUp,
	"StairDn":          StairDn,
	"PortalIn":         PortalIn,
	"PortalAutoIn":     PortalAutoIn,
	"PortalOut":        PortalOut,
	"Recycler":         Recycler,
	"RotateLineAttack": RotateLineAttack,
}

func String2FieldObjDisplayType(s string) (FieldObjDisplayType, bool) {
	v, b := _string2FieldObjDisplayType[s]
	return v, b
}
