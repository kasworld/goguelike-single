// Code generated by "genprotocol.exe -ver=2ac7ac69120d10cefa55d02b4dc610a33d5994ff1218aea5c255601ad7ab3a19 -basedir=protocol_c2t -prefix=c2t -statstype=int"

package c2t_idcmd

import "fmt"

type CommandID uint16 // use in packet header, DO NOT CHANGE
const (
	AchieveInfo       CommandID = iota //
	Rebirth                            //
	MoveFloor                          // tower cmd
	AIPlay                             //
	VisitFloorList                     // floor info of visited
	PassTurn                           // no action just trigger turn
	Meditate                           // rest and recover HP,SP
	KillSelf                           //
	Move                               // move 8way near tile
	Attack                             // attack near 1 tile
	AttackWide                         // attack near 3 tile
	AttackLong                         // attack 3 tile to direction
	Pickup                             // pickup carryobj
	Drop                               // drop carryobj
	Equip                              // equip equipable carryobj
	UnEquip                            // unequip equipable carryobj
	DrinkPotion                        //
	ReadScroll                         //
	Recycle                            // sell carryobj
	EnterPortal                        //
	ActTeleport                        //
	AdminFloorMove                     // Next Before floorUUID
	AdminTeleport                      // random pos in floor
	AdminAddExp                        //  add arg to battle exp
	AdminPotionEffect                  // buff by arg potion type
	AdminScrollEffect                  // buff by arg Scroll type
	AdminCondition                     // add arg condition for 100 turn
	AdminAddPotion                     // add arg potion to inven
	AdminAddScroll                     // add arg scroll to inven
	AdminAddMoney                      // add arg money to inven
	AdminAddEquip                      // add random equip to inven
	AdminForgetFloor                   // forget current floor map
	AdminFloorMap                      // complete current floor map

	CommandID_Count int = iota
)

var _CommandID2string = [CommandID_Count][2]string{
	AchieveInfo:       {"AchieveInfo", ""},
	Rebirth:           {"Rebirth", ""},
	MoveFloor:         {"MoveFloor", "tower cmd"},
	AIPlay:            {"AIPlay", ""},
	VisitFloorList:    {"VisitFloorList", "floor info of visited"},
	PassTurn:          {"PassTurn", "no action just trigger turn"},
	Meditate:          {"Meditate", "rest and recover HP,SP"},
	KillSelf:          {"KillSelf", ""},
	Move:              {"Move", "move 8way near tile"},
	Attack:            {"Attack", "attack near 1 tile"},
	AttackWide:        {"AttackWide", "attack near 3 tile"},
	AttackLong:        {"AttackLong", "attack 3 tile to direction"},
	Pickup:            {"Pickup", "pickup carryobj"},
	Drop:              {"Drop", "drop carryobj"},
	Equip:             {"Equip", "equip equipable carryobj"},
	UnEquip:           {"UnEquip", "unequip equipable carryobj"},
	DrinkPotion:       {"DrinkPotion", ""},
	ReadScroll:        {"ReadScroll", ""},
	Recycle:           {"Recycle", "sell carryobj"},
	EnterPortal:       {"EnterPortal", ""},
	ActTeleport:       {"ActTeleport", ""},
	AdminFloorMove:    {"AdminFloorMove", "Next Before floorUUID"},
	AdminTeleport:     {"AdminTeleport", "random pos in floor"},
	AdminAddExp:       {"AdminAddExp", " add arg to battle exp"},
	AdminPotionEffect: {"AdminPotionEffect", "buff by arg potion type"},
	AdminScrollEffect: {"AdminScrollEffect", "buff by arg Scroll type"},
	AdminCondition:    {"AdminCondition", "add arg condition for 100 turn"},
	AdminAddPotion:    {"AdminAddPotion", "add arg potion to inven"},
	AdminAddScroll:    {"AdminAddScroll", "add arg scroll to inven"},
	AdminAddMoney:     {"AdminAddMoney", "add arg money to inven"},
	AdminAddEquip:     {"AdminAddEquip", "add random equip to inven"},
	AdminForgetFloor:  {"AdminForgetFloor", "forget current floor map"},
	AdminFloorMap:     {"AdminFloorMap", "complete current floor map"},
}

func (e CommandID) String() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][0]
	}
	return fmt.Sprintf("CommandID%d", uint16(e))
}

func (e CommandID) CommentString() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][1]
	}
	return ""
}

var _string2CommandID = map[string]CommandID{
	"AchieveInfo":       AchieveInfo,
	"Rebirth":           Rebirth,
	"MoveFloor":         MoveFloor,
	"AIPlay":            AIPlay,
	"VisitFloorList":    VisitFloorList,
	"PassTurn":          PassTurn,
	"Meditate":          Meditate,
	"KillSelf":          KillSelf,
	"Move":              Move,
	"Attack":            Attack,
	"AttackWide":        AttackWide,
	"AttackLong":        AttackLong,
	"Pickup":            Pickup,
	"Drop":              Drop,
	"Equip":             Equip,
	"UnEquip":           UnEquip,
	"DrinkPotion":       DrinkPotion,
	"ReadScroll":        ReadScroll,
	"Recycle":           Recycle,
	"EnterPortal":       EnterPortal,
	"ActTeleport":       ActTeleport,
	"AdminFloorMove":    AdminFloorMove,
	"AdminTeleport":     AdminTeleport,
	"AdminAddExp":       AdminAddExp,
	"AdminPotionEffect": AdminPotionEffect,
	"AdminScrollEffect": AdminScrollEffect,
	"AdminCondition":    AdminCondition,
	"AdminAddPotion":    AdminAddPotion,
	"AdminAddScroll":    AdminAddScroll,
	"AdminAddMoney":     AdminAddMoney,
	"AdminAddEquip":     AdminAddEquip,
	"AdminForgetFloor":  AdminForgetFloor,
	"AdminFloorMap":     AdminFloorMap,
}

func String2CommandID(s string) (CommandID, bool) {
	v, b := _string2CommandID[s]
	return v, b
}
