// Code generated by "genenum.exe -typename=EventType -packagename=eventtype -basedir=."

package eventtype

import "fmt"

type EventType uint8

const (
	//
	OnExit EventType = iota // OnExit is the event generated by Application when the user tries to close the window (desktop) or the Exit() method is called.
	//
	//
	OnDescendant // Dispatched when a descendent is added or removed
	//
	OnWindowClose //
	//
	OnWindowPos  //
	OnWindowSize //
	OnKeyUp      //
	OnKeyDown    //
	OnKeyRepeat  //
	OnChar       //
	OnCursor     //
	OnMouseUp    //
	OnMouseDown  //
	OnScroll     //
	//
	//  Core events sent by the GUI manager.
	//  The target panel is the panel immediately under the mouse cursor.
	//
	//  Events sent to all panels except the ancestors of the target panel
	OnMouseDownOut // Any mouse button is pressed
	OnMouseUpOut   // Any mouse button is released
	//
	OnCursorEnter // Event sent to new target panel and all of its ancestors up to (not including) the common ancestor of the new and old targets Cursor entered the panel or a descendant
	//
	OnCursorLeave // Event sent to old target panel and all of its ancestors up to (not including) the common ancestor of the new and old targets Cursor left the panel or a descendant
	//
	OnFocus // Event sent to the new key-focused DispatcherI, specified on a call to gui.Manager().SetKeyFocus(DispatcherI) All keyboard events will be exclusively sent to the receiving DispatcherI
	//
	OnFocusLost // Event sent to the previous key-focused DispatcherI when another panel is key-focused Keyboard events will stop being sent to the receiving DispatcherI
	//
	OnResize // Panel size changed (no parameters)
	//
	OnEnable // Panel enabled/disabled (no parameters)
	//
	OnClick // Widget clicked by mouse left button or via key press
	//
	OnChange // Value was changed. Emitted by List, DropDownList, CheckBox and Edit
	//
	OnRadioGroup // Radio button within a group changed state
	//
	//
	OnTableClick // is the event generated when the table is right or left clicked Parameter is TableClickEvent
	//
	OnTableRowCount // is the event generated when the table row count changes (no parameters)
	//
	//
	SleepyEvent // Dispatched after a body has gone in to the sleepy state.
	//
	SleepEvent // Dispatched after a body has fallen asleep.
	//
	WakeUpEvent // Dispatched after a sleeping body has woken up.
	//
	CollideEvent // Dispatched after two bodies collide. This event is dispatched on each of the two bodies involved in the collision.
	//
	BeginContactEvent // physics.BeginContactEvent
	EndContactEvent   // physics.EndContactEvent
	CollisionEv       // physics.Collision
	//
	OnListItemResize // is the identifier of the event dispatched when a ListItem's child panel is resized
	//

	EventType_Count int = iota
)

var _EventType2string = [EventType_Count][2]string{
	OnExit:            {"OnExit", "OnExit is the event generated by Application when the user tries to close the window (desktop) or the Exit() method is called."},
	OnDescendant:      {"OnDescendant", "Dispatched when a descendent is added or removed"},
	OnWindowClose:     {"OnWindowClose", ""},
	OnWindowPos:       {"OnWindowPos", ""},
	OnWindowSize:      {"OnWindowSize", ""},
	OnKeyUp:           {"OnKeyUp", ""},
	OnKeyDown:         {"OnKeyDown", ""},
	OnKeyRepeat:       {"OnKeyRepeat", ""},
	OnChar:            {"OnChar", ""},
	OnCursor:          {"OnCursor", ""},
	OnMouseUp:         {"OnMouseUp", ""},
	OnMouseDown:       {"OnMouseDown", ""},
	OnScroll:          {"OnScroll", ""},
	OnMouseDownOut:    {"OnMouseDownOut", "Any mouse button is pressed"},
	OnMouseUpOut:      {"OnMouseUpOut", "Any mouse button is released"},
	OnCursorEnter:     {"OnCursorEnter", "Event sent to new target panel and all of its ancestors up to (not including) the common ancestor of the new and old targets Cursor entered the panel or a descendant"},
	OnCursorLeave:     {"OnCursorLeave", "Event sent to old target panel and all of its ancestors up to (not including) the common ancestor of the new and old targets Cursor left the panel or a descendant"},
	OnFocus:           {"OnFocus", "Event sent to the new key-focused DispatcherI, specified on a call to gui.Manager().SetKeyFocus(DispatcherI) All keyboard events will be exclusively sent to the receiving DispatcherI"},
	OnFocusLost:       {"OnFocusLost", "Event sent to the previous key-focused DispatcherI when another panel is key-focused Keyboard events will stop being sent to the receiving DispatcherI"},
	OnResize:          {"OnResize", "Panel size changed (no parameters)"},
	OnEnable:          {"OnEnable", "Panel enabled/disabled (no parameters)"},
	OnClick:           {"OnClick", "Widget clicked by mouse left button or via key press"},
	OnChange:          {"OnChange", "Value was changed. Emitted by List, DropDownList, CheckBox and Edit"},
	OnRadioGroup:      {"OnRadioGroup", "Radio button within a group changed state"},
	OnTableClick:      {"OnTableClick", "is the event generated when the table is right or left clicked Parameter is TableClickEvent"},
	OnTableRowCount:   {"OnTableRowCount", "is the event generated when the table row count changes (no parameters)"},
	SleepyEvent:       {"SleepyEvent", "Dispatched after a body has gone in to the sleepy state."},
	SleepEvent:        {"SleepEvent", "Dispatched after a body has fallen asleep."},
	WakeUpEvent:       {"WakeUpEvent", "Dispatched after a sleeping body has woken up."},
	CollideEvent:      {"CollideEvent", "Dispatched after two bodies collide. This event is dispatched on each of the two bodies involved in the collision."},
	BeginContactEvent: {"BeginContactEvent", "physics.BeginContactEvent"},
	EndContactEvent:   {"EndContactEvent", "physics.EndContactEvent"},
	CollisionEv:       {"CollisionEv", "physics.Collision"},
	OnListItemResize:  {"OnListItemResize", "is the identifier of the event dispatched when a ListItem's child panel is resized"},
}

func (e EventType) String() string {
	if e >= 0 && e < EventType(EventType_Count) {
		return _EventType2string[e][0]
	}
	return fmt.Sprintf("EventType%d", uint8(e))
}

func (e EventType) CommentString() string {
	if e >= 0 && e < EventType(EventType_Count) {
		return _EventType2string[e][1]
	}
	return ""
}

var _string2EventType = map[string]EventType{
	"OnExit":            OnExit,
	"OnDescendant":      OnDescendant,
	"OnWindowClose":     OnWindowClose,
	"OnWindowPos":       OnWindowPos,
	"OnWindowSize":      OnWindowSize,
	"OnKeyUp":           OnKeyUp,
	"OnKeyDown":         OnKeyDown,
	"OnKeyRepeat":       OnKeyRepeat,
	"OnChar":            OnChar,
	"OnCursor":          OnCursor,
	"OnMouseUp":         OnMouseUp,
	"OnMouseDown":       OnMouseDown,
	"OnScroll":          OnScroll,
	"OnMouseDownOut":    OnMouseDownOut,
	"OnMouseUpOut":      OnMouseUpOut,
	"OnCursorEnter":     OnCursorEnter,
	"OnCursorLeave":     OnCursorLeave,
	"OnFocus":           OnFocus,
	"OnFocusLost":       OnFocusLost,
	"OnResize":          OnResize,
	"OnEnable":          OnEnable,
	"OnClick":           OnClick,
	"OnChange":          OnChange,
	"OnRadioGroup":      OnRadioGroup,
	"OnTableClick":      OnTableClick,
	"OnTableRowCount":   OnTableRowCount,
	"SleepyEvent":       SleepyEvent,
	"SleepEvent":        SleepEvent,
	"WakeUpEvent":       WakeUpEvent,
	"CollideEvent":      CollideEvent,
	"BeginContactEvent": BeginContactEvent,
	"EndContactEvent":   EndContactEvent,
	"CollisionEv":       CollisionEv,
	"OnListItemResize":  OnListItemResize,
}

func String2EventType(s string) (EventType, bool) {
	v, b := _string2EventType[s]
	return v, b
}
